{
  "openapi": "3.0.1",
  "info": {
    "title": "ValueCard REST API",
    "version": "v5",
    "description": "# Introduction \n\nCustomer loyalty programs are a proven method to encourage customer retention and to increase the average amount spent-per-purchase.\nValuecard helps the businesses to create and manage successful customer loyalty programs. Using the most advanced and intuitive technology platform, Valuecard’s loyalty programs increase the client’s bottom-line and maximize customer engagement.\nIncluded in Valuecard’s offerings are:\n\n - Loyalty program management tools that use business intelligence,\n   targeted marketing communication, and automated triggers\n - Connectivity with POS systems and customized integration with any\n   other retail systems.\n - Tools to create and manage Coalition Clubs\n   across multiple merchants as well as tools for managing deliveries,\n   online purchases, and immediate rewards.\n - Built-in big data analytics tools to segment and assess customer behavior and patterns, evaluate\n   the effectiveness of campaigns, and more.\n - Fully customized branded mobile app with advanced loyalty features, POS connectivity,\n   location-based messaging, social media integration and more.\n - Advanced cloud-based back-office administrative tools, including\n   reporting, analytics, and loyalty program and mobile-app management\n   capabilities\n\n\n\n## About this Document\n\nThis document describes the REST API operations users can integrate into their POS system to manage customers and purchases for their customer loyalty program.\nThe document is intended for POS companies, not for the loyalty programs owners, who are their clients.\n\n\nAPI operations descriptions in this document include the following sections:\n\n - A brief description of the operation \n - A flow diagram showing the steps\n   included in each API function as the POS operator sees them \n - A description of every field in the API operation.\n - Example requests and responses",
    "contact": {
      "name": "Dan Klipstein",
      "url": "www.valuecard.co.il",
      "email": "dan@valuecard.co.il"
    }
  },
  "servers": [
    {
      "url": "https://valuecard.co.il/api/"
    }
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/pos/transaction/VoidTransaction": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidTransactionParameters"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidTransactionParameters"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VoidTransactionParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcTransactionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcTransactionResponse"
                }
              }
            }
          }
        },
        "summary": "Cancellation of the Entire Transaction",
        "description": "This operation is triggered when the POS operator wants to completely void an entire transaction, usually after the transaction has been closed. It can also void a transaction before it has been closed if the client decides not to go through with the transaction. It cannot be used to cancel only certain items within the transaction.\n\nOnce a card has been associated with a transaction this operation must be run in order to void the transaction.\n\nThe POS operator initiates a full refund to a transaction. The POS software identifies that Valuecard is associated with the transaction and calls VoidTransaction.\n",
        "tags": [
          "Voiding"
        ]
      }
    },
    "/pos/club_member/AuthenticateMember": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateMemberParameter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateMemberParameter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateMemberParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticateMemberResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticateMemberResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Members Authenticate"
        ],
        "summary": "Self-Service kiosk - member authentication",
        "description": "This endpoint is userd for authenticating a member in a Self service kiost or websites"
      }
    },
    "/pos/club_member/SendAuthenticationMessage": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendAuthenticationMessageParameter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendAuthenticationMessageParameter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendAuthenticationMessageParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VcBaseResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcBaseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcBaseResponse"
                }
              }
            }
          }
        },
        "summary": "Authentication Message",
        "tags": [
          "Members Authenticate"
        ],
        "description": "This endpoint is userd to send an sms message to the cellphone entered with an authentication code"
      }
    },
    "/pos/club_member/UpdateClubMember": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClubMemberUpdateParameters"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ClubMemberUpdateParameters"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ClubMemberUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VcBaseResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcBaseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcBaseResponse"
                }
              }
            }
          }
        },
        "summary": "Update Club Member",
        "tags": [
          "Member/User"
        ]
      }
    },
    "/pos/club_member/ClubMemberDetails": {
      "get": {
        "parameters": [
          {
            "name": "clientIdentifier",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "memberId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SpClubMemberDetailsResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpClubMemberDetailsResult"
                }
              }
            }
          }
        },
        "summary": "Club Member Details",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Member/User"
        ]
      }
    },
    "/pos/budget/LoadBudgetQuery": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadBudgetParameters"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadBudgetParameters"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoadBudgetParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcTransactionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcTransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Budget"
        ],
        "summary": "Load Budget Query",
        "description": "This operation is used by the POS operator to load money on to the Valuecard. This is different from a regular sales transaction because the money is being transfered onto the card but is not yet considered income. It stays open until the payment is confirmed using \n[LoadBudgetCommitQuery](#tag/Budget/paths/~1pos~1budget~1LoadBudgetCommitQuery/post).\n\nThe POS operator clicks Load Budget. The Search Screen is opened (see section ‎3, “Member and Card Search”). Once a card is identified, a new transaction is created and the POS operator enters the amount to load. The POS operator clicks Confirm and the Web service LoadBudgetQuery is called.",
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/pos/benefits/GetBenefitsQuery": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBenefitsJsonParameters"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBenefitsJsonParameters"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetBenefitsJsonParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcGetBenefitQueryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcGetBenefitQueryResponse"
                }
              }
            }
          }
        },
        "summary": "Get Benefits Query",
        "description": "This operation requests benefits from Valuecard’s server and applies them in the form of a discount to the transaction or simply recording the transaction on Valuecard's servers for points accumulation or just for analysis. It is triggered for every transaction that has a Valuecard associated with it when the POS operator initiates the Payment.\n\nWhen a POS operator associates a Valuecard with a transaction and clicks “Pay”, the existing benefits from [View Benefits Details] operation are displayed along with a field for applying points or a coupon. If this is second time the POS operator applied points or coupon in this transaction, they will be remembered and displayed in this field.\n\nAfter applying any relevant points or coupon number and clicking “Continue”, the Get Benefits Query is started. The Get Benefits Query operation retrieves the current transaction data and calculates the final outcome which can translate into bottom line discount and/or items discount. \n\nIf the output parameter [Discount] is greater than 0, that amount will be credited to the account and tagged as a Valuecard benefit. If items discounts string is returned to POS that each item on the bill should be discounted accordingly along with the description of what was the discount for. If Valuecard is linked, once reached the payment stage, the Get Benefits Query is run again and the benefits are recalculated. Prior to re-running the operation the existing Valuecard discount are deleted.\n\nIn addition, the content  of the response parameter [PrintMessage] will be displayed on screen thus the cashier will be able to view and comprehend the results.\n\nIt is not possible to use more than one Valuecard in a transaction unless the checkout mechanism allows splitting a transaction into several parts and relating to each one separately.\n\nIf the POS operator deletes the Valuecard benefit line (the discount) the following will occur:\n - Valuecard discount will be canceled.\n - Valuecard will no longer be associated with the transaction.\n - The VoidTransaction operation will be called.",
        "tags": [
          "Benefits and Rewards"
        ],
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/pos/club_member/RegisterClubMemberEx": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterClubMemberParameters"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterClubMemberParameters"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterClubMemberParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterClubMemberExResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterClubMemberExResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Member/User"
        ],
        "summary": "Club Member Register",
        "description": "This operation is run by the POS operator to register a customer as a new member of their loyalty program. The POS operator will be asked if the customer is a club member. If the customer is not a club member, there will be an option to transfer to New Member Registration.\n\nThe new member’s card number can then be linked to the transaction using the output parameter [MemberCardNumber].\nIn the registration screen, the new member can choose whether the primary identifier should be the card number or their phone number. The default is phone number. If they select card number as the primary identifier, they will be asked to swipe the card. If a cellphone number is selected, the number is entered in the appropriate field and the value of -1 (negative 1) is passed to the [Card Number] parameter.\n\nThe new member will be asked to fill in personal details including name, phone number, address, email, birthday and anniversary.\n\nIf the registration succeeds the [PrintMessage] is displayed on the POS. If it fails, an error message will be displayed.\n\nOnce the new member is registered, the card will be linked to the current transaction. The linking identifier will be [CardNumber] which will be returned to from the registration process, whether the registration was done using a real or virtual card.\n\nIn general, for any action other than client registration, if error message -1059 is returned, a registration form will be prompted.",
        "operationId": "205"
      }
    },
    "/pos/club_member/SearchClubMember": {
      "get": {
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "The first name of the cardholder"
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "The last name of the cardholder"
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "Phone number of the cardholder"
          },
          {
            "name": "cellPhone",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "Cellphone number of the cardholder"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "The email address of the cardholder"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "Cardholder’s personal ID number"
          },
          {
            "name": "clientIdentifier",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SpClubMemberDetailsResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpClubMemberDetailsResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpClubMemberDetailsResult"
                }
              }
            }
          }
        },
        "summary": "Member and Card Search",
        "description": "This operation is run by the POS operator to search for a club member/card. By default, the search is done by swiping the card. It can also be done by manually entering the client's name, card number, email, ID number, or phone number.\n\nThe search will return the client’s name, card number, cellphone number, email, birthday, expiration date, and more.\n\nOnce you have searched for and found a card, you can perform the following actions:\n - Associate the card to the current transaction by calling the AssociateCardToTransaction operation using the unique CardNumber identifier returned in the search.\n \n - View the benefits on the card by calling the \n[CardInformationEx](#tag/Card/paths/~1pos~1card~1CardInformationEx/get) operation using the unique CardNumber identifier returned in the search.\n \n - View the club member/card details by calling the [ClubMemberDetails](#tag/Members/paths/~1pos~1club_member~1ClubMemberDetails/get)  operation using the unique MemberID identifier returned in the search.\n\n - Edit club member/card details by calling the [UpdateClubMember](#tag/Members/paths/~1pos~1club_member~1UpdateClubMember/post) operation using the unique MemberID identifier returned in the search\n\n - Transfer club member to a new card by calling the TransferCardActivity operation using the unique CardID identifier returned in the search.\n \n - View recent activity by calling the ViewRecentActivity operation using the unique CardID identifier returned in the search.\n",
        "operationId": "",
        "tags": [
          "Member/User"
        ]
      }
    },
    "/pos/card/CardInformationEx": {
      "get": {
        "parameters": [
          {
            "name": "clientIdentifier",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pin",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardInformationExResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardInformationExResponse"
                }
              }
            }
          }
        },
        "summary": "Card Information Ex",
        "description": "\n**View Benefits Details**\n\nThis operation may be used in two different scenatios:\n\n 1. To view the benefits details of the Card/Voucher/Member/App the POS operator after a search operation.\n 2.  To associate the Card/Voucher/Member/App to an open transaction on POS so it can materialize its benefits and rewards\n\nin a later operation withou the need to retype or reswipe the client identifier number.\n\nIf the operation is successful, the card details are displayed on the screen. These details include the name, transaction ID, points, benefits, expiration date, last transaction details, and more. \n\nThe POS should display vividly a sign that Valuecard is linked along with the clubmember’s name if exists.\n\nIf the parameter [DisplayUpsale] = 1, a popup window showing the content of the output parameter [UpsaleMessage] is also displayed.\nFrom here the POS operator can continue to Get Benefits Query or close the screen without further action.\n\nIf the operation fails an error [Message] will be displayed.\n",
        "tags": [
          "Member/User"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "5302"
      }
    },
    "/pos/benefits/GetBenefitsCommitQuery": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBenefitsCommitQueryParameters"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBenefitsCommitQueryParameters"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetBenefitsCommitQueryParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcTransactionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcTransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Benefits and Rewards"
        ],
        "summary": "Get Benefits Commit Query",
        "description": "Closing the Transaction\n\nThis operation is triggered by the POS upon closing the transaction. It must be synchronized with the results of the last Get Benefits Query via the [TransactionID].\n\nEvery time a Get Benefits Query is run the results are sent to the POS along with a [TransactionID]. The results stay there until the POS operator chooses to close the transaction. When closing the transaction, the POS passes the [TransactionID] in the [QueryTransactionID] parameter. It also passes the [Discount] returned from Valuecard which will be populated in the Valuecard [NewBenefits] parameter.\n\nIf the transaction is completed successfully, the POS will read the function Closing the Transaction and print the [PrintMessage] that Valuecard returned at the Commit stage along with the receipt.\n\nIf payment did not go through, a request to cancel the entire transaction will be sent.\n\nWhen a transaction is successfully closed, it returns a new [TransactionID] which is saved in the POS and used for internal reporting, returning items or voiding the transaction as necessary.\n"
      }
    },
    "/pos/budget/LoadBudgetCommitQuery": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadBudgetCommitQueryParameters"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadBudgetCommitQueryParameters"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoadBudgetCommitQueryParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcTransactionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VcTransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Budget"
        ],
        "summary": "Commit Loading Budget",
        "description": "After payment is confirmed from the LoadBudget Query, the POS will call the LoadBudgetCommitQuery and upon receiving a positive response, the amount paid will be recorded as a receipt only and will not issue an invoice.",
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PayMethod": {
        "type": "object",
        "properties": {
          "method": {
            "type": "integer",
            "format": "int32"
          },
          "paymentSum": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "LoadBudgetParameters": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string",
            "nullable": true
          },
          "loadSum": {
            "type": "number",
            "format": "double"
          },
          "payMethod": {
            "$ref": "#/components/schemas/PayMethod"
          },
          "clientIdentifier": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "VcBaseResponse": {
        "type": "object",
        "properties": {
          "returnCode": {
            "type": "integer",
            "format": "int32"
          },
          "httpCode": {
            "type": "integer",
            "format": "int32"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "printMessage": {
            "type": "string",
            "nullable": true
          },
          "exception": {
            "type": "string",
            "nullable": true
          },
          "tempPrintMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Common",
        "description": ""
      },
      "VcTransactionResponse": {
        "type": "object",
        "properties": {
          "common": {
            "$ref": "#/components/schemas/VcBaseResponse"
          },
          "transactionId": {
            "type": "integer",
            "format": "int32",
            "description": "Transaction Id"
          },
          "memberFullName": {
            "type": "string",
            "nullable": true
          },
          "authId": {
            "type": "integer",
            "format": "int32"
          },
          "totalPoints": {
            "type": "integer",
            "format": "int32"
          },
          "finalAmount": {
            "type": "number",
            "format": "double"
          },
          "originalAmount": {
            "type": "number",
            "format": "double"
          },
          "discount": {
            "type": "number",
            "format": "double"
          },
          "prepaidBalance": {
            "type": "number",
            "format": "double"
          },
          "givenBenefits": {
            "type": "string",
            "nullable": true
          },
          "newBenefits": {
            "type": "string",
            "nullable": true
          },
          "prepayBalanceDescription": {
            "type": "string",
            "nullable": true
          },
          "locationFooter": {
            "type": "string",
            "nullable": true
          },
          "memberCellPhone": {
            "type": "string",
            "nullable": true
          },
          "cardUnitsDescription": {
            "type": "string",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "nullable": true
          },
          "businessAddress": {
            "type": "string",
            "nullable": true
          },
          "discountAmount": {
            "type": "string",
            "nullable": true
          },
          "openingBalance": {
            "type": "number",
            "format": "double"
          },
          "tempPrintMessage": {
            "type": "string",
            "nullable": true
          },
          "givenPromoIDs": {
            "type": "string",
            "nullable": true
          },
          "availableBenefits": {
            "type": "string",
            "nullable": true
          },
          "itemsDiscountArray": {
            "type": "string",
            "nullable": true
          },
          "insertNewItemsArray": {
            "type": "string",
            "nullable": true
          },
          "balanceRedeemed": {
            "type": "string",
            "nullable": true
          },
          "paymentDocType": {
            "type": "integer",
            "format": "int32"
          },
          "paymentClientName": {
            "type": "string",
            "nullable": true
          },
          "cellphone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "cardGroup": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "statusText": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "anniversaryDate": {
            "type": "string",
            "format": "date-time"
          },
          "balanceDisplay": {
            "type": "string",
            "nullable": true
          },
          "upSaleMessage": {
            "type": "string",
            "nullable": true
          },
          "displayUpSale": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LoadBudgetCommitQueryParameters": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string",
            "nullable": true
          },
          "payMethod": {
            "$ref": "#/components/schemas/PayMethod"
          },
          "queryTransactionId": {
            "type": "integer",
            "format": "int32"
          },
          "clientIdentifier": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SpClubMemberDetailsResult": {
        "type": "object",
        "properties": {
          "common": {
            "$ref": "#/components/schemas/VcBaseResponse"
          },
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "cardId": {
            "type": "integer",
            "format": "int32"
          },
          "cardNum": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "birthDay": {
            "type": "string",
            "nullable": true
          },
          "cellPhone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "expiredDate": {
            "type": "string",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "integer",
            "format": "int32"
          },
          "memberClass": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "zipcode": {
            "type": "string",
            "nullable": true
          },
          "anniversaryDate": {
            "type": "string",
            "nullable": true
          },
          "memberClassId": {
            "type": "string",
            "nullable": true
          },
          "cardStatus": {
            "type": "string",
            "nullable": true
          },
          "balance": {
            "type": "string",
            "nullable": true
          },
          "cardGroup": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RegisterClubMemberParameters": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "anniversaryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "cellPhone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "integer",
            "format": "int32"
          },
          "clientIdentifier": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RegisterClubMemberExResponse": {
        "type": "object",
        "properties": {
          "common": {
            "$ref": "#/components/schemas/VcBaseResponse"
          },
          "memberCardNumber": {
            "type": "string",
            "nullable": true
          },
          "memberFullName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SendAuthenticationMessageParameter": {
        "type": "object",
        "properties": {
          "cellPhone": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TransItem": {
        "type": "object",
        "properties": {
          "extItemNum": {
            "type": "string",
            "nullable": true
          },
          "sequentialNum": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "itemPrice": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "businessCode": {
            "type": "integer",
            "format": "int64"
          },
          "originalPrice": {
            "type": "number",
            "format": "double"
          },
          "discount": {
            "type": "number",
            "format": "double"
          },
          "promotionCode": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "family": {
            "type": "string",
            "nullable": true
          },
          "allowDiscount": {
            "type": "integer",
            "format": "int64"
          },
          "parentItem": {
            "type": "string",
            "nullable": true
          },
          "itemName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Tran": {
        "type": "object",
        "properties": {
          "transId": {
            "type": "integer",
            "format": "int64"
          },
          "orderNum": {
            "type": "string",
            "nullable": true
          },
          "numberOfClients": {
            "type": "integer",
            "format": "int64"
          },
          "orderType": {
            "type": "integer",
            "format": "int64"
          },
          "clientNum": {
            "type": "integer",
            "format": "int64"
          },
          "transItems": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TransItem"
            }
          }
        }
      },
      "ParseJson": {
        "type": "object",
        "properties": {
          "trans": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Tran"
            }
          }
        }
      },
      "GetBenefitsJsonParameters": {
        "required": [
          "clientIdentifier",
          "transactionSum"
        ],
        "type": "object",
        "properties": {
          "clientIdentifier": {
            "type": "string"
          },
          "transactionSum": {
            "type": "number",
            "format": "double"
          },
          "budgetToUse": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "pin": {
            "type": "string",
            "nullable": true
          },
          "voidTransactionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requestedPromoIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "transaction": {
            "$ref": "#/components/schemas/ParseJson"
          }
        }
      },
      "VcGetBenefitQueryResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "integer",
            "format": "int32"
          },
          "memberFullName": {
            "type": "string",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "double"
          },
          "locationFooter": {
            "type": "string",
            "nullable": true
          },
          "memberCellPhone": {
            "type": "string",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "nullable": true
          },
          "openingBalance": {
            "type": "number",
            "format": "double"
          },
          "tempPrintMessage": {
            "type": "string",
            "nullable": true
          },
          "givenPromoIDs": {
            "type": "string",
            "nullable": true
          },
          "availableBenefits": {
            "type": "string",
            "nullable": true
          },
          "itemsDiscountArray": {
            "type": "string",
            "nullable": true
          },
          "insertNewItemsArray": {
            "type": "string",
            "nullable": true
          },
          "givenPointsRedemption": {
            "type": "string",
            "nullable": true
          },
          "common": {
            "$ref": "#/components/schemas/VcBaseResponse"
          },
          "upSaleMessage": {
            "type": "string",
            "nullable": true
          },
          "displayUpSale": {
            "type": "integer",
            "format": "int32"
          }
        },
        "title": ""
      },
      "TransItemCommit": {
        "type": "object",
        "properties": {
          "extItemNum": {
            "type": "string",
            "nullable": true
          },
          "sequentialNum": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "itemPrice": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "businessCode": {
            "type": "integer",
            "format": "int64"
          },
          "originalPrice": {
            "type": "number",
            "format": "double"
          },
          "discount": {
            "type": "number",
            "format": "double"
          },
          "promotionCode": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "family": {
            "type": "string",
            "nullable": true
          },
          "allowDiscount": {
            "type": "integer",
            "format": "int64"
          },
          "parentItem": {
            "type": "string",
            "nullable": true
          },
          "itemName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TranCommit": {
        "type": "object",
        "properties": {
          "transItems": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TransItemCommit"
            }
          }
        }
      },
      "ParseJsonCommit": {
        "type": "object",
        "properties": {
          "trans": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TranCommit"
            }
          }
        }
      },
      "GetBenefitsCommitQueryParameters": {
        "required": [
          "queryTransactionId"
        ],
        "type": "object",
        "properties": {
          "clientIdentifier": {
            "type": "string",
            "nullable": true
          },
          "transactionSum": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "queryTransactionId": {
            "type": "integer",
            "format": "int32"
          },
          "transaction": {
            "$ref": "#/components/schemas/ParseJsonCommit"
          }
        }
      },
      "VoidTransactionParameters": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string",
            "nullable": true
          },
          "voidTransactionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CardInformationExResponse": {
        "type": "object",
        "properties": {
          "common": {
            "$ref": "#/components/schemas/VcBaseResponse"
          },
          "transactionId": {
            "type": "integer",
            "format": "int32"
          },
          "memberFullName": {
            "type": "string",
            "nullable": true
          },
          "totalPoints": {
            "type": "integer",
            "format": "int32"
          },
          "prepaidBalance": {
            "type": "number",
            "format": "double"
          },
          "locationFooter": {
            "type": "string",
            "nullable": true
          },
          "memberCellPhone": {
            "type": "string",
            "nullable": true
          },
          "cardUnitsDescription": {
            "type": "string",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "nullable": true
          },
          "businessAddress": {
            "type": "string",
            "nullable": true
          },
          "memberCardNumber": {
            "type": "string",
            "nullable": true
          },
          "upsaleMessage": {
            "type": "string",
            "nullable": true
          },
          "displayUpsale": {
            "type": "integer",
            "format": "int32"
          },
          "availableBenefits": {
            "type": "string",
            "nullable": true
          },
          "insertNewItemsArray": {
            "type": "string",
            "nullable": true
          },
          "cellphone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "cardGroup": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "statusText": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "anniversaryDate": {
            "type": "string",
            "format": "date-time"
          },
          "balanceDisplay": {
            "type": "string",
            "nullable": true
          }
        },
        "title": ""
      },
      "ClubMemberUpdateParameters": {
        "type": "object",
        "properties": {
          "idNum": {
            "type": "string",
            "nullable": true
          },
          "extGender": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "birthDay": {
            "type": "string",
            "nullable": true
          },
          "cellPhone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "anniversaryDate": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "zipcode": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AuthenticateMemberResponse": {
        "type": "object",
        "properties": {
          "common": {
            "$ref": "#/components/schemas/VcBaseResponse"
          }
        }
      },
      "AuthenticateMemberParameter": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "celPhone": {
            "type": "string",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "name": "API Key",
        "type": "apiKey",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "Members Authenticate"
    },
    {
      "name": "Member/User"
    },
    {
      "name": "Benefits and Rewards"
    },
    {
      "name": "Budget"
    },
    {
      "name": "Voiding"
    }
  ]
}